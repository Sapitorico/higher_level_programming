import unittest
from models.base import Base
from models.rectangle import Rectangle
from models.square import Square



class TestBase(unittest.TestCase):
    """methods of tests """
    def test_id(self):
        """ test id """
        b1 = Base()
        self.assertEqual(b1.id, 1)
        b2 = Base()
        self.assertEqual(b2.id, 2)
        b3 = Base()
        self.assertEqual(b3.id, 3)
        b4 = Base(12)
        self.assertEqual(b4.id, 12)
        b5 = Base()
        self.assertEqual(b5.id, 4)


    # def test_to_json_string(self):
    #     """ test to json string """
    #     r1 = Rectangle(10, 7, 2, 8)
    #     dictionary = r1.to_dictionary()
    #     json_dictionary = Base.to_json_string([dictionary])
    #     self.assertEqual(type(json_dictionary), str)
    #     self.assertEqual(json_dictionary, '[{"x": 2, "y": 8, "id": 1, "height": 7, "width": 10}]')
    #     json_dictionary = Base.to_json_string(None)
    #     self.assertEqual(json_dictionary, '[]')
    #     json_dictionary = Base.to_json_string([])
    #     self.assertEqual(json_dictionary, '[]')

    # def test_from_json_string(self):
    #     """ test from json string """
    #     list_input = [{'id': 89, 'width': 10, 'height': 4}]
    #     json_list_input = Base.to_json_string(list_input)
    #     list_output = Base.from_json_string(json_list_input)
    #     self.assertEqual(list_output, [{'id': 89, 'width': 10, 'height': 4}])
    #     list_input = []
    #     json_list_input = Base.to_json_string(list_input)
    #     list_output = Base.from_json_string(json_list_input)
    #     self.assertEqual(list_output, [])
    #     list_input = None
    #     json_list_input = Base.to_json_string(list_input)
    #     list_output = Base.from_json_string(json_list_input)
    #     self.assertEqual(list_output, [])

    # def test_create(self):
    #     """ test create """
    #     r1 = Rectangle(3, 5, 1, 1)
    #     dictionary = r1.to_dictionary()
    #     r2 = Rectangle.create(**dictionary)
    #     self.assertEqual(r2.__str__(), '[Rectangle] (1) 1/1 - 3/5')
    #     self.assertFalse(r1 is r2)
    #     s1 = Square(5)
    #     dictionary = s1.to_dictionary()
    #     s2 = Square.create(**dictionary)
    #     self.assertEqual(s2.__str__(), '[Square] (1) 0/0 - 5')

    # def test_save_to_file(self):
    #     """ test save to file """
    #     r1 = Rectangle(10, 7, 2, 8)
    #     r2 = Rectangle(2, 4)
    #     Rectangle.save_to_file([r1, r2])
    #     with open('Rectangle.json', 'r') as file:
    #         self.assertEqual(file.read(), '[{"x": 2, "y": 8, "id": 1, "height": 7, "width": 10}, {"x": 0, "y": 0, "id": 2, "height": 4, "width": 2}]')
    #     Rectangle.save_to_file(None)
    #     with open('Rectangle.json', 'r') as file:
    #         self.assertEqual(file.read(), '[]')
    #     Rectangle.save_to_file([])
    #     with open('Rectangle.json', 'r') as file:
    #         self.assertEqual(file.read(), '[]')
    #     s1 = Square(5)
    #     s2 = Square(7, 9, 1)
    #     Square.save_to_file([s1, s2])
    #     with open('Square.json', 'r') as file:
    #         self.assertEqual(file.read(), '[{"x": 0, "y": 0, "id": 1, "size": 5}, {"x": 9, "y": 1, "id": 2, "size": 7}]')
    #     Square.save_to_file(None)
    #     with open('Square.json', 'r') as file:
    #         self.assertEqual(file.read(), '[]')
    #     Square.save_to_file([])
    #     with open('Square.json', 'r') as file:
    #         self.assertEqual(file.read(), '[]')

    # def test_load_from_file(self):
    #     """ test load from file """
    #     list_rectangles_output = Rectangle.load_from_file()
    #     self.assertEqual(list_rectangles_output, [])
    #     r1 = Rectangle(10, 7, 2, 8)
    #     r2 = Rectangle(2, 4)
    #     Rectangle.save_to_file([r1, r2])
    #     list_rectangles_output = Rectangle.load_from_file()
    #     self.assertEqual(len(list_rectangles_output), 2)
    #     self.assertEqual(list_rectangles_output[0].__str__(), '[Rectangle] (1) 2/8 - 10/7')
    #     self.assertEqual(list_rectangles_output[1].__str__(), '[Rectangle] (2) 0/0 - 2/4')
    #     list_squares_output = Square.load_from_file()
    #     self.assertEqual(list_squares_output, [])
    #     s1 = Square(5)
    #     s2 = Square(7, 9, 1)
    #     Square.save_to_file([s1, s2])
    #     list_squares_output = Square.load_from_file()
    #     self.assertEqual(len(list_squares_output), 2)
    #     self.assertEqual(list_squares_output[0].__str__(), '[Square] (1) 0/0 - 5')
    #     self.assertEqual(list_squares_output[1].__str__(), '[Square] (2) 9/1 - 7')



if __name__ == '__main__':
    unittest.main()

