>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/mnt/c/Users/5060/Desktop/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise ValueError(f"{name} must be greater than 0")
ValueError: my_int must be greater than 0
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", float)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/mnt/c/Users/5060/Desktop/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError(f"{name} must be an integer")
TypeError: my_int must be an integer
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>>
>>> bg = BaseGeometry()
>>>
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>>
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0
>>> bg =  BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/mnt/c/Users/5060/Desktop/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 8, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator("age")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/mnt/c/Users/5060/Desktop/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError(f"{name} must be an integer")
TypeError: age must be an integer
>>> bg.integer_validator("age", True)
>>> bg.integer_validator("age", {3,4})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/mnt/c/Users/5060/Desktop/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError(f"{name} must be an integer")
TypeError: age must be an integer
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/mnt/c/Users/5060/Desktop/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError(f"{name} must be an integer")
TypeError: age must be an integer
